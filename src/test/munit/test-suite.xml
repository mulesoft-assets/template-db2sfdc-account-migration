<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<munit:config name="test-suite.xml" doc:name="MUnit configuration" />
	<configuration-properties doc:name="Configuration properties"
		doc:id="c382dc50-b83c-41be-ad31-42ccb929d758" file="mule.test.properties" />
	<munit:before-test name="test-suiteBefore_Test"
		description="Before tests actions" doc:id="7f8facb1-95ae-4456-9448-faf3a3a89dc9">
		<ee:transform doc:name="Prepare testing data for DB"
			doc:id="7c253cc1-4a09-4e71-a9c5-74e5dbbf5848">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="testRecords" ><![CDATA[%dw 2.0
output application/java
---
[{
	Description: "test description1",
	Name: "TestAccountDB2SFDC1" ++ randomInt(10000),
	Industry: "Education",
	NumberOfEmployees: 150010
},
{
	Description: "test description2",
	Name: "TestAccountDB2SFDC2" ++ randomInt(10000),
	Industry: "Energy",
	NumberOfEmployees: 100
},
{
	Description: "test description3",
	Name: "TestAccountDB2SFDC3" ++ randomInt(10000),
	Industry: "Education",
	NumberOfEmployees: 150001
}
]
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:bulk-insert doc:name="Insert Accounts to DB" doc:id="fa2247fe-f4e5-46fd-a2f9-b725cf3a2bd0" config-ref="Database_Config">
			<db:bulk-input-parameters ><![CDATA[#[vars.testRecords]]]></db:bulk-input-parameters>
			<db:sql >INSERT INTO Account (
								Id,
								Description,
								Industry,
								Name,
								NumberOfEmployees
								) VALUES (
								UUID(),
								:Description,
								:Industry,
								:Name,
								:NumberOfEmployees
								)</db:sql>
		</db:bulk-insert>
		<ee:transform doc:name="Prepare testing account for SFDC" doc:id="f7476bdd-7562-44bd-a891-a5fb51f29f81" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[
	{
		Description: "test description3",
		Name: vars.testRecords[2].Name,
		Industry: "Education",
		NumberOfEmployees: randomInt(100000)
	}
]
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<salesforce:create doc:name="Create Account in SFDC" doc:id="6e3a84f4-6cbc-475c-8616-86d12f47819e" config-ref="Salesforce_Sfdc_config" type="Account"/>
        <set-variable value="#[payload.items map ($.id)]" doc:name="Store IDs to variable sfdcIds" doc:id="623a0d4f-c873-45e6-a7ee-89bc1e194721" variableName="sfdcIds" />
        <munit-tools:mock-when doc:name="Mock email processor to avoid sending email" doc:id="17ab3357-3f08-4456-9f14-c41c281e06f1" processor="email:send">
				<munit-tools:then-return />
			</munit-tools:mock-when>
	</munit:before-test>
	<munit:test name="test-suite-businesslogicFlowTest" description="Test" doc:id="4ffcda90-21bf-4cd4-9460-09cf6ca578e5" >
		<munit:execution >
			<flow-ref doc:name="Query DB Account Call" doc:id="a895fe4c-6645-428f-a987-f93b06ad02f0" name="queryDBSubFlow"/>
			<ee:transform doc:name="Filter test Records" doc:id="d7180fa2-6ec7-471e-bbf8-8a0dced7243c" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testRecords[0].Name 
	or $.Name == vars.testRecords[1].Name 
	or $.Name == vars.testRecords[2].Name  
)]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<flow-ref doc:name="Call Business Logic Flow" doc:id="3e0601a1-1b47-4974-83b0-8d30726559dd" name="businessLogicFlow"/>
			<scripting:execute doc:name="Sleep for 10s until the processing is completed" doc:id="b09fe305-3000-4571-b824-8b555395ccb7" engine="groovy">
				<scripting:code >sleep(10000)</scripting:code>
			</scripting:execute>
			<salesforce:query doc:name="Select migrated Records" doc:id="9f174da2-7a51-4e5e-8937-148f6a5531cf" config-ref="Salesforce_Sfdc_config">
			<salesforce:salesforce-query>SELECT Id, Name,  NumberOfEmployees FROM Account WHERE Name IN (':name1', ':name2', ':name3')</salesforce:salesforce-query>
				<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"name1" : vars.testRecords[0].Name,
	"name2" : vars.testRecords[1].Name,
	"name3" : vars.testRecords[2].Name
}]]]></salesforce:parameters>
		</salesforce:query>
			<ee:transform doc:name="Filter test Records to variables" doc:id="c7ab0ced-5479-473b-92b1-5175b7c3976c" >
				<ee:message >
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="sfdcIds" ><![CDATA[%dw 2.0
output application/java
---
payload map ($.Id)]]></ee:set-variable>
					<ee:set-variable variableName="noRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testRecords[1].Name) ]]></ee:set-variable>
					<ee:set-variable variableName="createdRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testRecords[0].Name) ]]></ee:set-variable>
					<ee:set-variable variableName="updatedRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testRecords[2].Name and $.NumberOfEmployees as Number == vars.testRecords[2].NumberOfEmployees) ]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that we didn't find Account" doc:id="1e559409-a86b-47b9-bb44-cbcac54c4ade" expression="#[sizeOf(vars.noRecord)]" is="#[MunitTools::equalTo(0)]" message="Account shouldn't be migrated"/>
			<munit-tools:assert-that doc:name="Assert that we found migrated Account" doc:id="a8f4453a-10c6-4508-8ecf-64cc08e6129c" expression="#[sizeOf(vars.createdRecord)]" is="#[MunitTools::equalTo(1)]" message="Account should be created"/>
			<munit-tools:assert-that doc:name="Assert that Number of employees was updated" doc:id="798bd6c1-88b2-4cc9-916d-ed7cb4adc0c8" expression="#[sizeOf(vars.updatedRecord)]" is='#[MunitTools::equalTo(1)]' message="Account should be updated"/>
		</munit:validation>
	</munit:test>
	<munit:after-test name="test-suiteAfter_Test" description="After tests actions" doc:id="5b85bb9e-67e6-47f7-8f71-53a39f147fc8" >
		<db:delete doc:name="Delete Accounts from DB" doc:id="6aff5b09-2af5-4627-8aa7-a0ac361bbd81" config-ref="Database_Config">
			<db:sql >DELETE FROM Account WHERE Name LIKE 'TestAccountDB2SFDC%'</db:sql>
		</db:delete>
        <salesforce:delete doc:name="Delete Accounts from SFDC" doc:id="9c3d62eb-6ef1-4b73-845b-6acd244996bf" config-ref="Salesforce_Sfdc_config">
			<salesforce:ids ><![CDATA[#[vars.sfdcIds]]]></salesforce:ids>
		</salesforce:delete>
	</munit:after-test>


</mule>